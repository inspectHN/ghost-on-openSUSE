#! /bin/sh
### BEGIN INIT INFO
# Provides:          ghost
# Required-Start:    $network $syslog
# Required-Stop:     $network $syslog
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Short-Description: Ghost Blogging Platform
# Description:       Ghost: Just a blogging platform
### END INIT INFO

DESC="Ghost"
NAME=ghost
GHOST_ROOT=/srv/www/htdocs/ghost
GHOST_GROUP=ghost
GHOST_USER=ghost
DAEMON=/usr/bin/node
DAEMON_ARGS="$GHOST_ROOT/index.js"
LOGFILE=/var/log/ghost/$NAME.log
PIDFILE=/var/log/ghost/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
STARTUP_WAIT_TIME="5s"
export NODE_ENV=production

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 5

# Need to cd to $GHOST_ROOT so node with start with appropriate environment values
cd $GHOST_ROOT

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
	start)
		echo "`date +[%F_%H-%M-%S]` Starting..." >> $LOGFILE
		echo -n "Starting $NAME: "

		# Set up folder structure
		mkdir -p /var/log/ghost/run
		chown -R ghost:ghost /var/log/ghost
		
		sudo -u $GHOST_USER -g $GHOST_GROUP $DAEMON $DAEMON_ARGS >> $LOGFILE 2>&1 &
		thePPID=$!
		sleep $STARTUP_WAIT_TIME
		if [[ -n `ps -eo pid,ppid,user | grep $thePPID | grep $GHOST_USER` ]]; then
			thePID=`ps -eo pid,ppid,user | grep $thePPID | grep $GHOST_USER | awk '{print $1;}'`
			sudo -u $GHOST_USER -g $GHOST_GROUP echo "$thePID" > $PIDFILE
			if [[ -n `netstat -lntp | grep $thePID` ]]; then
				echo -n "[ "
				echo -en "\033[1;32mOK"
				echo -e "\033[0;39m ]"
				exit 0
			else
				echo "!!!!!netstat output: `netstat -lntp | grep $thePID`"
				echo -n "[ "
				echo -en "\033[1;33mFailed"
				echo -e "\033[0;39m ]"
				echo "Process appears to have started, but no TCP listener has been created"
				exit 1
			fi
		else
			echo -n "[ "
			echo -en "\033[1;31mFailed"
			echo -e "\033[0;39m ]"
			exit 7
		fi
		;;
	stop)
		echo -n "Stopping $NAME: "
		if ! [[ -f $PIDFILE ]]; then
			echo -n "[ "
			echo -en "\033[1;33mFailed"
			echo -en "\033[0;39m ]..."
			echo "the service was not running" 
			exit 7
		fi
		
		thePID=`cat $PIDFILE`
		if ! [[ -n `echo $thePID | egrep '[0-9]+'` ]]; then
			echo -n "[ "
			echo -en "\033[1;31mFailed"
			echo -e "\033[0;39m ]"
			echo -e "\tDid not receive a value from $PIDFILE"
			echo -e "\tRemoving stale PID file"
			rm -f $PIDFILE
			exit 7
		fi
		
		echo "`date +[%F_%H-%M-%S]` Stopping..." >> $LOGFILE
		kill $thePID
		if [[ -n `ps -eo pid | grep $thePID` ]]; then
			kill -9 $thePID
			echo -n "[ "
			echo -en "\033[1;33mOK"
			echo -e "\033[0;39m ]"
			echo -e "\tNote: The process needed to be force killed"
			rm -f $PIDFILE
			exit 1
		else
			echo -n "[ "
			echo -en "\033[1;32mOK"
			echo -e "\033[0;39m ]"
			rm -f $PIDFILE
			exit 0
		fi
		;;
	status)
		echo -n "$NAME "
		# Return value is slightly different for the status command:
		# 0 - service up and running
		# 1 - service dead, but /var/run/  pid  file exists
		# 2 - service dead, but /var/lock/ lock file exists
		# 3 - service not running (unused)
		# 4 - service status unknown :-(
		# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
		
		if ! [[ -f $PIDFILE ]]; then
			echo "is stopped"
			exit 3
		fi

		thePID=`cat $PIDFILE`
		if [[ -n `echo $thePID | egrep '[0-9]+'` ]]; then
			echo "(pid $thePID) is running..."
			exit 0
		else
			echo "is stopped"
			echo -e "\tNote: $PIDFILE still exists"
			exit 1
		fi
		;;
	restart|force-reload)
		#
		# If the "reload" option is implemented then remove the
		# 'force-reload' alias from here, and include it with
		# the reload option
		#
		
		## Stop the service and regardless of whether it was
		## running or not, start it again.
		$0 stop
		$0 start
		;;
	*)
		echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
		exit 3
		;;
esac
